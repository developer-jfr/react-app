{"version":3,"sources":["utils/validators/validators.ts","assets/images/preloader.svg","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","redux/dialogs-reducer.ts","assets/images/user.png","components/Users/users.module.css","api/api.ts","serviceWorker.js","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","components/Login/LoginPage.tsx","redux/app-reducer.ts","redux/sidebar-reducer.ts","utils/object-helpers.ts","api/users-api.ts","redux/users-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","components/Users/Users.tsx","components/Users/UsersContainer.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","components/common/FormsControls/FormsControls.module.css"],"names":["required","value","maxLengthCreator","maxLength","length","Preloader","style","backgroundColor","src","preloader","module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","posts","id","message","likesCount","actions","addPostActionCreator","newPostText","type","setUserProfile","setStatus","deletePost","postId","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","messages","Promise","reject","profileReducer","state","action","newPost","filter","p","dialogs","name","sendMessage","newMessageBody","dialogsReducer","body","ResultCodesEnum","ResultCodeForCapcthaEnum","axios","create","withCredentials","baseURL","Boolean","window","location","hostname","match","authAPI","email","password","rememberMe","captcha","post","delete","securityAPI","login","isAuth","captchaUrl","payload","getAuthUserData","meData","Success","getCaptchaUrl","url","authReducer","LoginReduxForm","reduxForm","form","handleSubmit","error","onSubmit","createField","Input","undefined","className","formSummaryError","LoginPage","useSelector","useDispatch","to","CaptchaIsRequired","initialized","appReducer","sidebarReducer","updateObjectInArray","items","itemId","objPropName","newObjProps","map","u","usersAPI","getUsers","currentPage","pageSize","term","friend","follow","unfollow","users","totalUsersCount","isFetching","followingInProgress","count","requestUsers","page","totalCount","usersReducer","followed","rootReducer","combineReducers","profilePage","dialogsPage","sidebar","usersPage","formReducer","app","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","__store__","withSuspense","WrappedComponent","props","Suspense","fallback","createSelector","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","getUsersFilter","Paginator","totalItemsCount","onPageChanged","x","portionSize","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","cn","styles","paginator","onClick","selectedPage","pageNumber","e","User","user","small","userPhoto","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","enableReinitialize","initialValues","String","validate","setSubmitting","onFilterChanged","isSubmitting","as","Users","history","useHistory","useEffect","parsed","queryString","search","substr","actualPage","actualFilter","Number","query","pathname","UsersPage","pageTitle","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","alt","icon","UserOutlined","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedDialogs","SuspendedProfile","SuspendedChatPage","App","catchAllUnhandledErrors","alert","this","initializeApp","addEventListener","removeEventListener","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","TextArea","input","FormControl","meta","touched","children","hasError","formControl","Textarea","restProps","placeholder","validators","component","text"],"mappings":"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","file":"static/js/main.44c63094.chunk.js","sourcesContent":["export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}\r\n","export default __webpack_public_path__ + \"static/media/preloader.5788b05c.svg\";","import React from 'react';\r\nimport preloader from \"../../../assets/images/preloader.svg\";\r\n\r\ntype PropsType = {\r\n}\r\n\r\nlet Preloader: React.FC = () => {\r\n    return <div  style={ { backgroundColor: 'white' } }>\r\n        <img src={preloader} />\r\n    </div>\r\n}\r\n\r\nexport default Preloader;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__1esxW\",\"pageNumber\":\"Paginator_pageNumber__oLzQ8\",\"selectedPage\":\"Paginator_selectedPage__YY5rP\"};","import {PhotosType, ProfileType} from '../types/types';\r\nimport {instance, APIResponseType} from './api';\r\n\r\ntype SavePhotoResponseDataType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<APIResponseType>(`profile/status`, {status: status}).then(res => res.data);\r\n    },\r\n    savePhoto(photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append(\"image\", photoFile);\r\n\r\n        return instance.put<APIResponseType<SavePhotoResponseDataType>>(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        }).then(res => res.data);\r\n    },\r\n    saveProfile(profile: ProfileType) {\r\n        return instance.put<APIResponseType>(`profile`, profile).then(res => res.data);\r\n    }\r\n}\r\n","import {FormAction, stopSubmit} from \"redux-form\";\r\nimport {PhotosType, PostType, ProfileType} from '../types/types';\r\nimport {usersAPI} from '../api/users-api';\r\nimport {profileAPI} from '../api/profile-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', likesCount: 12},\r\n        {id: 2, message: 'It\\'s my first post', likesCount: 11},\r\n        {id: 3, message: 'Blabla', likesCount: 11},\r\n        {id: 4, message: 'Dada', likesCount: 11}\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n}\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST': {\r\n            let newPost = {\r\n                id: 5,\r\n                message: action.newPostText,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            };\r\n        }\r\n        case 'SN/PROFILE/SET_STATUS': {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case 'SN/PROFILE/SET_USER_PROFILE': {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return {...state, posts: state.posts.filter(p => p.id != action.postId)}\r\n\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    addPostActionCreator: (newPostText: string) => ({type: 'SN/PROFILE/ADD-POST', newPostText} as const),\r\n    setUserProfile: (profile: ProfileType) => ({type: 'SN/PROFILE/SET_USER_PROFILE', profile} as const),\r\n    setStatus: (status: string) => ({type: 'SN/PROFILE/SET_STATUS', status} as const),\r\n    deletePost: (postId: number) => ({type: 'SN/PROFILE/DELETE_POST', postId} as const),\r\n    savePhotoSuccess: (photos: PhotosType) => ({type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS', photos} as const)\r\n}\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n    const data = await profileAPI.getProfile(userId)\r\n    dispatch(actions.setUserProfile(data))\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.getStatus(userId)\r\n    dispatch(actions.setStatus(data))\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        let data = await profileAPI.updateStatus(status)\r\n\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.setStatus(status))\r\n        }\r\n    } catch(error) {\r\n        //\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => async (dispatch) => {\r\n    let data = await profileAPI.savePhoto(file)\r\n\r\n    if (data.resultCode === 0) {\r\n        dispatch(actions.savePhotoSuccess(data.data.photos))\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => async (dispatch, getState) => {\r\n    const userId = getState().auth.userId\r\n    const data = await profileAPI.saveProfile(profile)\r\n\r\n    if (data.resultCode === 0) {\r\n        if (userId != null) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            throw new Error(\"userId can't be null\")\r\n        }\r\n    } else {\r\n        dispatch(stopSubmit(\"edit-profile\", {_error: data.messages[0] }))\r\n        return Promise.reject(data.messages[0])\r\n    }\r\n}\r\n\r\nexport default profileReducer\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import {InferActionsTypes} from './redux-store';\r\n\r\ntype DialogType = {\r\n    id: number\r\n    name: string\r\n}\r\ntype MessageType = {\r\n    id: number\r\n    message: string\r\n}\r\n\r\nlet initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'}\r\n    ] as Array<DialogType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How is your it-kamasutra?'},\r\n        {id: 3, message: 'Yo'},\r\n        {id: 4, message: 'Yo'},\r\n        {id: 5, message: 'Yo'}\r\n    ] as Array<MessageType>\r\n}\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/SEND_MESSAGE':\r\n            let body = action.newMessageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    sendMessage: (newMessageBody: string) => ({type: 'SN/DIALOGS/SEND_MESSAGE', newMessageBody} as const)\r\n}\r\n\r\nexport default dialogsReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n","export default __webpack_public_path__ + \"static/media/user.96e310a6.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3va1Z\"};","import axios from \"axios\";\r\nimport {UserType} from '../types/types';\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers:     {\r\n        \"API-KEY\": \"d12ef03a-3a06-4a09-b6ba-81c76a32de15\"\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1\r\n}\r\n\r\nexport enum ResultCodeForCapcthaEnum {\r\n    CaptchaIsRequired = 10\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: RC\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {instance, APIResponseType, ResultCodeForCapcthaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\ntype LoginResponseDataType = {\r\n    userId: number\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data);\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null) {\r\n        return instance.post<APIResponseType<LoginResponseDataType, ResultCodesEnum | ResultCodeForCapcthaEnum>>(`auth/login`, {email, password, rememberMe, captcha})\r\n            .then(res => res.data);\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n","import {instance} from './api';\r\n\r\ntype GetCaptchaUrlResponseType = {\r\n    url: string\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get<GetCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data);\r\n    }\r\n}\r\n","import {ResultCodeForCapcthaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {authAPI} from '../api/auth-api';\r\nimport {securityAPI} from '../api/security-api';\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store';\r\nimport {Action} from 'redux';\r\nimport {FormAction} from 'redux-form/lib/actions';\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null// if null, then captcha is not required\r\n};\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA', payload: {userId, email, login, isAuth}\r\n    } as const),\r\n    getCaptchaUrlSuccess: (captchaUrl: string) => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS', payload: {captchaUrl}\r\n    } as const)\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me()\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, login, email} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let data = await authAPI.login(email, password, rememberMe, captcha);\r\n    if (data.resultCode === ResultCodesEnum.Success) {\r\n        // success, get auth data\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (data.resultCode === ResultCodeForCapcthaEnum.CaptchaIsRequired) {\r\n            dispatch(getCaptchaUrl());\r\n        }\r\n\r\n        let message = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n        dispatch(stopSubmit(\"login\", {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const data = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: any) => {\r\n    let response = await authAPI.logout()\r\n\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport default authReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n","import React from 'react'\r\nimport {InjectedFormProps, reduxForm} from 'redux-form'\r\nimport {createField, GetStringKeys, Input} from '../common/FormsControls/FormsControls'\r\nimport {required} from '../../utils/validators/validators'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {login} from '../../redux/auth-reducer'\r\nimport {Redirect} from 'react-router-dom'\r\nimport style from './../common/FormsControls/FormsControls.module.css'\r\nimport {AppStateType} from '../../redux/redux-store'\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps>\r\n    = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required], Input)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl && createField<LoginFormValuesTypeKeys>('Symbols from image', 'captcha', [required], Input, {})}\r\n\r\n\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n    </div>\r\n}\r\n","import {getAuthUserData} from \"./auth-reducer\"\r\nimport {InferActionsTypes} from './redux-store';\r\n\r\nlet initialState = {\r\n    initialized: false\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    initializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const)\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise = dispatch(getAuthUserData());\r\n\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;\r\n","let initialState = {}\r\ntype InitialStateType = typeof initialState\r\nconst sidebarReducer = (state = initialState, action: any) => {\r\n    return state;\r\n}\r\n\r\nexport default sidebarReducer;\r\n","\r\nexport const updateObjectInArray = (items: any, itemId: any, objPropName: any, newObjProps: any) => {\r\n    return items.map((u: any) => {\r\n        if (u[objPropName] === itemId) {\r\n            return {...u, ...newObjProps}\r\n        }\r\n        return u;\r\n    })\r\n}\r\n","import {GetItemsType, instance, APIResponseType} from './api';\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10, term: string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`) )\r\n            .then(res => res.data)\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n    }\r\n}\r\n","import {updateObjectInArray} from '../utils/object-helpers'\r\nimport {UserType} from '../types/types'\r\nimport {BaseThunkType, InferActionsTypes} from './redux-store'\r\nimport {Dispatch} from 'redux'\r\nimport {usersAPI} from '../api/users-api'\r\nimport {APIResponseType} from '../api/api'\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>, //array of users ids,\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialState => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({type: 'SN/USERS/FOLLOW', userId} as const),\r\n    unfollowSuccess: (userId: number) => ({type: 'SN/USERS/UNFOLLOW', userId} as const),\r\n    setUsers: (users: Array<UserType>) => ({type: 'SN/USERS/SET_USERS', users} as const),\r\n    setCurrentPage: (currentPage: number) => ({type: 'SN/USERS/SET_CURRENT_PAGE', currentPage} as const),\r\n    setFilter: (filter: FilterType) => ({type: 'SN/USERS/SET_FILTER', payload: filter} as const),\r\n    setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        count: totalUsersCount\r\n    } as const),\r\n    toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const)\r\n}\r\n\r\nexport const requestUsers = (page: number,\r\n                             pageSize: number, filter: FilterType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true))\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false))\r\n        dispatch(actions.setUsers(data.items))\r\n        dispatch(actions.setTotalUsersCount(data.totalCount))\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>,\r\n                                   userId: number,\r\n                                   apiMethod: (userId: number) => Promise<APIResponseType>,\r\n                                   actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n\r\n    if (response.resultCode == 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer\r\n\r\nexport type InitialState = typeof initialState\r\nexport type FilterType = typeof initialState.filter\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    \r\n})\r\n\r\ntype RootReducerType = typeof rootReducer; // (globalstate: AppStateType) => AppStateType\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\r\n// @ts-ignore\r\nwindow.__store__ = store\r\n\r\nexport default store\r\n","import React from \"react\"\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<div>loading...</div>} >\r\n            <WrappedComponent {...props} />\r\n        </React.Suspense>\r\n    }\r\n}\r\n","import {createSelector} from \"reselect\";\r\nimport { AppStateType } from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u => true);\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter;\r\n}\r\n","import React, {useState} from 'react'\r\nimport styles from './Paginator.module.css'\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage?: number\r\n    onPageChanged?: (pageNumber: number) => void\r\n    portionSize?: number\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount, pageSize,\r\n                                      currentPage = 1,\r\n                                      onPageChanged = x => x,\r\n                                      portionSize = 10}) => {\r\n\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n\r\n    let pages: Array<number> = [];\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n\r\n    return <div className={cn(styles.paginator)}>\r\n        { portionNumber > 1 &&\r\n        <button onClick={() => { setPortionNumber(portionNumber - 1) }}>PREV</button> }\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p<=rightPortionPageNumber)\r\n                .map((p) => {\r\n                return <span className={ cn({\r\n                    [styles.selectedPage]: currentPage === p\r\n                }, styles.pageNumber) }\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        { portionCount > portionNumber &&\r\n            <button onClick={() => { setPortionNumber(portionNumber + 1) }}>NEXT</button> }\r\n\r\n\r\n    </div>\r\n}\r\n\r\nexport default Paginator;\r\n","import React from 'react'\r\nimport styles from './users.module.css'\r\nimport userPhoto from '../../assets/images/user.png'\r\nimport {NavLink} from 'react-router-dom'\r\nimport {UserType} from '../../types/types'\r\n\r\ntype PropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    unfollow: (userId: number) => void\r\n    follow: (userId: number) => void\r\n}\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow}) => {\r\n    return (\r\n        <div>\r\n                <span>\r\n                    <div>\r\n                       <NavLink to={'/profile/' + user.id}>\r\n                        <img src={user.photos.small != null ? user.photos.small : userPhoto}\r\n                             className={styles.userPhoto}/>\r\n                       </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {user.followed\r\n                            ? <button disabled={followingInProgress\r\n                                .some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          unfollow(user.id)\r\n                                      }}>\r\n                                Unfollow</button>\r\n                            : <button disabled={followingInProgress.some(id => id === user.id)}\r\n                                      onClick={() => {\r\n                                          follow(user.id)\r\n                                      }}>\r\n                                Follow</button>}\r\n\r\n                    </div>\r\n                </span>\r\n            <span>\r\n                    <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{'user.location.country'}</div>\r\n                        <div>{'user.location.city'}</div>\r\n                    </span>\r\n                </span>\r\n        </div>)\r\n}\r\n\r\nexport default User\r\n","import {Field, Form, Formik} from 'formik'\r\nimport React from 'react'\r\nimport {FilterType} from '../../redux/users-reducer'\r\nimport {useSelector} from 'react-redux'\r\nimport {getUsersFilter} from '../../redux/users-selectors'\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'false' | 'null'\r\n\r\ntype FormType = {\r\n    term: string\r\n    friend: 'true' | 'false' | 'null'\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nexport const UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: FilterType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n        }\r\n\r\n        props.onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return <div>\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n            validate={usersSearchFormValidate}\r\n            onSubmit={submit}\r\n        >\r\n            {({isSubmitting}) => (\r\n                <Form>\r\n                    <Field type=\"text\" name=\"term\"/>\r\n\r\n                    <Field name=\"friend\" as=\"select\">\r\n                        <option value=\"null\">All</option>\r\n                        <option value=\"true\">Only followed</option>\r\n                        <option value=\"false\">Only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting}>\r\n                        Find\r\n                    </button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </div>\r\n})\r\n","import React, {FC, useEffect} from 'react'\r\nimport Paginator from '../common/Paginator/Paginator'\r\nimport User from './User'\r\nimport {UsersSearchForm} from './UsersSearchForm'\r\nimport {FilterType, requestUsers} from '../../redux/users-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from '../../redux/users-selectors'\r\nimport {useHistory} from 'react-router-dom'\r\nimport * as queryString from 'querystring'\r\n\r\ntype PropsType = {}\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string }\r\nexport const Users: FC<PropsType> = (props) => {\r\n\r\n    const users = useSelector(getUsers)\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const filter = useSelector(getUsersFilter)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage\r\n        let actualFilter = filter\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page)\r\n\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch(parsed.friend) {\r\n            case \"null\":\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break;\r\n            case \"true\":\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break;\r\n            case \"false\":\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break;\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryParamsType = {}\r\n\r\n        if (!!filter.term) query.term = filter.term\r\n        if (filter.friend !== null) query.friend = String(filter.friend)\r\n        if (currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query)\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId));\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId));\r\n    }\r\n\r\n    return <div>\r\n\r\n        <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n\r\n        <Paginator currentPage={currentPage} onPageChanged={onPageChanged}\r\n                   totalItemsCount={totalUsersCount} pageSize={pageSize}/>\r\n        <div>\r\n            {\r\n                users.map(u => <User user={u}\r\n                                     followingInProgress={followingInProgress}\r\n                                     key={u.id}\r\n                                     unfollow={unfollow}\r\n                                     follow={follow}\r\n                    />\r\n                )\r\n            }\r\n        </div>\r\n    </div>\r\n}\r\n","import React from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport Preloader from '../common/Preloader/Preloader'\r\nimport {getIsFetching} from '../../redux/users-selectors'\r\nimport {Users} from './Users'\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n    const isFetching = useSelector(getIsFetching)\r\n    return <>\r\n        <h2>{props.pageTitle}</h2>\r\n        {isFetching ? <Preloader/> : null}\r\n        <Users />\r\n    </>\r\n}\r\n","import {AppStateType} from './redux-store'\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from 'antd'\r\nimport {UserOutlined} from '@ant-design/icons'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {selectCurrentUserLogin, selectIsAuth} from '../../redux/auth-selectors'\r\nimport {logout} from '../../redux/auth-reducer'\r\n\r\nexport type MapPropsType = {}\r\n\r\nexport const Header: React.FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout\r\n\r\n    return <Header className=\"header\">\r\n        <Row>\r\n            <Col span={18}>\r\n                <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                    <Menu.Item key=\"1\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                </Menu>\r\n            </Col>\r\n\r\n            {isAuth\r\n                ?<> <Col span={1}>\r\n                    <Avatar alt={login || ''} style={{backgroundColor: '#87d068'}} icon={<UserOutlined/>}/>\r\n                </Col>\r\n                    <Col span={5}>\r\n                        <Button onClick={logoutCallback}>Log out</Button>\r\n                    </Col>\r\n                </>\r\n                : <Col span={6}>\r\n                    <Button>\r\n                        <Link to={'/login'}>Login</Link>\r\n                    </Button>\r\n                </Col>}\r\n\r\n        </Row>\r\n\r\n\r\n    </Header>\r\n\r\n    /*  <header className={s.header}>\r\n          <img src='https://www.freelogodesign.org/Content/img/logo-ex-7.png' />\r\n\r\n          <div className={s.loginBlock}>\r\n              { props.isAuth\r\n                  ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                  : <NavLink to={'/login'}>Login</NavLink> }\r\n          </div>\r\n      </header>*/\r\n}\r\n","import React, {Component} from 'react'\r\nimport './App.css'\r\nimport 'antd/dist/antd.css'\r\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from 'react-router-dom'\r\nimport {LoginPage} from './components/Login/LoginPage'\r\nimport {connect, Provider} from 'react-redux'\r\nimport {compose} from 'redux'\r\nimport {initializeApp} from './redux/app-reducer'\r\nimport Preloader from './components/common/Preloader/Preloader'\r\nimport store, {AppStateType} from './redux/redux-store'\r\nimport {withSuspense} from './hoc/withSuspense'\r\nimport {UsersPage} from './components/Users/UsersContainer'\r\n\r\nimport {Breadcrumb, Layout, Menu} from 'antd'\r\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons'\r\nimport { Header } from './components/Header/Header'\r\n\r\nconst {SubMenu} = Menu\r\nconst {Content, Footer, Sider} = Layout\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\nconst ChatPage = React.lazy(() => import('./pages/Chat/ChatPage'))\r\n\r\ntype MapPropsType = ReturnType<typeof mapStateToProps>\r\ntype DispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst SuspendedDialogs = withSuspense(DialogsContainer)\r\nconst SuspendedProfile = withSuspense(ProfileContainer)\r\nconst SuspendedChatPage = withSuspense(ChatPage)\r\n\r\n\r\nclass App extends Component<MapPropsType & DispatchPropsType> {\r\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\r\n        alert('Some error occured')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp()\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n\r\n\r\n        return (\r\n            <Layout>\r\n                <Header />\r\n                <Content style={{padding: '0 50px'}}>\r\n                    <Breadcrumb style={{margin: '16px 0'}}>\r\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <Layout className=\"site-layout-background\" style={{padding: '24px 0'}}>\r\n                        <Sider className=\"site-layout-background\" width={200}>\r\n                            <Menu\r\n                                mode=\"inline\"\r\n                                /*  defaultSelectedKeys={['7']}*/\r\n                                /*  defaultOpenKeys={['sub1']}*/\r\n                                style={{height: '100%'}}\r\n                            >\r\n                                <SubMenu key=\"sub1\" icon={<UserOutlined/>} title=\"My Profile\">\r\n                                    <Menu.Item key=\"1\"> <Link to=\"/profile\">Profile</Link></Menu.Item>\r\n                                    <Menu.Item key=\"2\"> <Link to=\"/dialogs\">Messages</Link></Menu.Item>\r\n                                    <Menu.Item key=\"3\">option3</Menu.Item>\r\n                                    <Menu.Item key=\"4\">option4</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined/>} title=\"Developers\">\r\n                                    <Menu.Item key=\"5\"><Link to=\"/developers\">Developers</Link></Menu.Item>\r\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\r\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\r\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\r\n                                </SubMenu>\r\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined/>} title=\"Chat\">\r\n                                    <Menu.Item key=\"9\"><Link to=\"/chat\">Chat</Link></Menu.Item>\r\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\r\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\r\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\r\n                                </SubMenu>\r\n                            </Menu>\r\n                        </Sider>\r\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\r\n\r\n                            <Switch>\r\n                                <Route exact path='/'\r\n                                       render={() => <Redirect to={'/profile'}/>}/>\r\n\r\n                                <Route path='/dialogs'\r\n                                       render={() => <SuspendedDialogs/>}/>\r\n\r\n                                <Route path='/profile/:userId?'\r\n                                       render={() => <SuspendedProfile/>}/>\r\n\r\n                                <Route path='/developers'\r\n                                       render={() => <UsersPage pageTitle={'Самураи'}/>}/>\r\n\r\n                                <Route path='/login'\r\n                                       render={() => <LoginPage/>}/>\r\n                                         <Route path='/chat'\r\n                                       render={() => <SuspendedChatPage/>}/>\r\n\r\n                                <Route path='*'\r\n                                       render={() => <div>404 NOT FOUND</div>}/>\r\n                            </Switch>\r\n\r\n                        </Content>\r\n                    </Layout>\r\n                </Content>\r\n                <Footer style={{textAlign: 'center'}}>Junior FrontEnd Developer Erkinbaev Bakai</Footer>\r\n            </Layout>\r\n\r\n\r\n            /*      <div className='app-wrapper'>\r\n                      <HeaderContainer/>\r\n                      <Navbar/>\r\n                      <div className='app-wrapper-content'>\r\n                          <Switch>\r\n                              <Route exact path='/'\r\n                                     render={() => <Redirect to={\"/profile\"}/>}/>\r\n\r\n                              <Route path='/dialogs'\r\n                                     render={() => <SuspendedDialogs /> }/>\r\n\r\n                              <Route path='/profile/:userId?'\r\n                                     render={() => <SuspendedProfile /> }/>\r\n\r\n                              <Route path='/users'\r\n                                     render={() => <UsersPage pageTitle={\"Самураи\"}/>}/>\r\n\r\n                              <Route path='/login'\r\n                                     render={() => <LoginPage/>}/>\r\n\r\n                              <Route path='*'\r\n                                     render={() => <div>404 NOT FOUND</div>}/>\r\n                          </Switch>\r\n\r\n                      </div>\r\n                  </div>*/\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialized: state.app.initialized\r\n})\r\n\r\nlet AppContainer = compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App)\r\n\r\nconst SamuraiJSApp: React.FC = () => {\r\n    return <BrowserRouter>\r\n        <Provider store={store}>\r\n            <AppContainer/>\r\n        </Provider>\r\n    </BrowserRouter>\r\n}\r\n\r\nexport default SamuraiJSApp\r\n","import * as serviceWorker from './serviceWorker';\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport SamuraiJSApp from \"./App\";\r\n\r\nReactDOM.render(<SamuraiJSApp/>, document.getElementById('root'));\r\n\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\"\r\nimport styles from \"./FormsControls.module.css\"\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\"\r\nimport {Field, WrappedFieldProps} from \"redux-form\"\r\nimport {WrappedFieldMetaProps} from 'redux-form/lib/Field'\r\nimport {LoginFormValuesType} from '../../Login/LoginPage';\r\nimport { Input as input } from 'antd';\r\n\r\nconst { TextArea } = input;\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><TextArea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    //const {input, meta, child, ...restProps} = props;\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                            name: FormKeysType,\r\n                            validators: Array<FieldValidatorType>,\r\n                            component: React.FC<WrappedFieldProps>,\r\n                            props = {}, text = \"\") {\r\n    return <div>\r\n        <Field placeholder={placeholder} name={name}\r\n               validate={validators}\r\n               component={component}\r\n               {...props}\r\n        /> {text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__3OB_w\",\"error\":\"FormsControls_error__bPb7C\",\"formSummaryError\":\"FormsControls_formSummaryError__2to5k\"};"],"sourceRoot":""}